# Design Patterns Learning Repository - Cursor Rules

## Project Purpose
This is a comprehensive learning repository for Design Patterns with hands-on examples and practical implementations. The goal is to master design patterns through structured learning and real-world practice.

## Folder Structure Convention
- **Naming**: `[OrderNumber] - [Category] - [Pattern Name]`
- Example: `1 - Creational - Singleton`, `2 - Creational - Factory Method`

## Required Files per Pattern
1. **`introduction.md`** - Core concepts, theory, structure, benefits/drawbacks
2. **`use-case.md`** - Real-world applications, practical scenarios, best practices  
3. **`use-case-[specific-example].ts`** - Individual focused implementations
4. **`index.ts`** - Pattern overview and navigation with npm scripts

## Code Implementation Standards

### TypeScript Requirements
- Use proper TypeScript types and interfaces
- Include comprehensive error handling and edge cases
- Add `import { exit } from "process"` and `exit(0)` at end of runnable files
- Use modern ES6+ features and current best practices

### File Structure for Use Cases
```typescript
// 1. Interfaces and types first
// 2. Abstract classes/creators  
// 3. Concrete implementations
// 4. Usage examples with comprehensive testing
// 5. Demonstration functions
// 6. Export statements
```

### Content Quality Standards
- **Practical Examples**: Solve real-world problems, not toy examples
- **Runnable Code**: All examples must execute with `npm run` commands
- **Educational Value**: Include both usage and testing demonstrations  
- **Professional Quality**: Production-ready code with proper error handling
- **Comprehensive Comments**: Explain the "why" not just the "how"
- **Real-world Complexity**: Don't oversimplify, show actual implementation challenges

### Package.json Scripts Pattern
```json
{
  "[pattern]": "ts-node \"[folder]/index.ts\"",
  "[pattern]:[example1]": "ts-node \"[folder]/use-case-[example1].ts\"",
  "[pattern]:[example2]": "ts-node \"[folder]/use-case-[example2].ts\""
}
```

## Documentation Guidelines

### introduction.md Format
- Use the following ordered sections to ensure consistency and readability:
  1. **Pattern Name** – H1 heading (`# [Pattern] Pattern`)
  2. **What is the Pattern?** – Brief definition & intent
  3. **Key Participants** – Table or bullet list (Abstraction, Implementations, etc.)
  4. **Key Characteristics** – Bullet list of distinguishing traits
  5. **How it Works** – High-level explanation of collaboration flow
  6. **Structure** – UML, or ASCII diagram
  7. **Benefits** – ✅ bullets
  8. **Drawbacks** – ❌ bullets
  9. **When to Use / Avoid** – Clear guidance
  10. **Real-World Examples** – Industry scenarios referencing repo demos
  11. **Common Implementation Variations** – Parameterised, registry-based, etc. with code snippets
  12. **Related Patterns** – Cross-links to other patterns in the repo
  13. Optional Enhancements  
    • Implementation Highlights  
    • Sequence Diagram  
    • Pitfalls & Anti-Patterns  
    • Testing Tips  
    • Performance Notes

- Keep headings in this order to maintain a cohesive narrative across all pattern introductions.

### use-case.md Format  
- Provide **Overview** paragraph explaining why the pattern is practical.  
- Then document at least **5 real-world Use Cases** using the *Problem ➜ Solution* style.  
- Recommended structure:
  1. `## Overview`
  2. Reusable table listing all use-cases briefly (optional)
  3. For each use-case:
     * `## Use Case X: Title`
       * `### Problem` – real-world pain point
       * `### Solution` – how pattern solves it; reference demo file & key interface/implementation names
       * Include **Target Interface** & **Adapter/Composite/Bridge** snippet where helpful.
- End with **Best Practices / Anti-Patterns** list if additional guidance is valuable.
- Reference runnable demos via `npm run` script names so readers can jump directly.
- Keep headings consistent across all patterns to ease scanning.

### Code Comments Style
- Explain design pattern concepts being demonstrated
- Include reasoning for architectural decisions
- Document edge cases and error handling
- Reference pattern theory where applicable

## Reflection Articles

The `Reflection/` folder hosts in-depth comparative or theoretical articles (e.g. *factory-method-vs-abstract-factory.md*, *adapter-pattern-in-functional-programming.md*).

### Purpose
- Synthesize learnings across multiple patterns or paradigms
- Provide advanced conceptual explanations and trade-off analysis
- Serve as long-form reading material that complements runnable examples

### Structure Template
1. Executive summary / key-takeaways (optional)
2. Sub-sections with clear headings (e.g. *OO Perspective*, *Functional Perspective*, *Real-World Examples*)
3. Practical code snippets (TypeScript when possible) – **no toy pseudo-code**
4. Comparison tables, UML or Mermaid diagrams where beneficial
5. "Best practices" and "Common pitfalls" sections
6. Further reading / references

### Writing Guidelines
- Keep a professional, instructional tone; favour clarity over jargon
- Back claims with concrete examples, metrics, or citations
- Show real-world APIs or libraries (Node core, express, fp-ts, etc.)
- Use fenced code blocks with language identifiers
- Keep line length reasonable (< 120 chars) to ease diffing
- Validate Mermaid diagrams compile in Markdown renderers

### Quality Checklist
- ✅ Includes at least **2-3 production-grade examples**
- ✅ Explains why each example matters in real projects
- ✅ Provides code that can be copy-pasted into repo or REPL
- ✅ Cross-links to related pattern folders where relevant
- ✅ Reviewed for technical accuracy and coherence

## Functional Patterns

Functional pattern folders live under `Function Patterns/` and demonstrate the FP equivalent of traditional OO design patterns.

### Folder Naming
- `Function Patterns/F[number] - [Pattern Name]`
- Example: `Function Patterns/F4 - Decorator Pattern - Function Composition`

### Required Files per FP Pattern
1. `index.ts` – Pattern overview and runnable navigation (mirrors OO `index.ts` style)
2. `introduction.md` – Functional theory, algebraic context, pros/cons, when to use/avoid
3. `use-case.md` – 3–5 real-world implemented examples in Problem/Solution format
4. `use-case-[specific-example].ts` – Focused runnable demos (may include multiple files)

### Coding Standards (FP-Specific)
- Prefer **pure functions** and **immutable data**; avoid classes unless interop is the lesson
- Use algebraic data types (`Option`, `Either`, `Task`, etc.) where they clarify intent
- Compose with `pipe` / `flow` (fp-ts) or native HOFs (`map`, `reduce`, `flatMap`)
- Document performance implications of composition when non-trivial
- Provide explicit types, `readonly` modifiers, and avoid `any`
- Demonstrate interop with Node/browser APIs when relevant (e.g. `promisify`, EventEmitter→Promise)

### Package.json Script Pattern
```json
{
  "f[number]": "ts-node \"Function Patterns/F[number] - [Pattern Name]/index.ts\"",
  "f[number]:[example]": "ts-node \"Function Patterns/F[number] - [Pattern Name]/use-case-[example].ts\""
}
```

### Testing & Demonstrations
- Each `use-case-*.ts` shows both **usage** and **edge-case tests**
- Include at least one real API integration (filesystem, network, etc.) for pragmatic value
- Finish with `exit(0)` to align with runnable-script convention

### Quality Checklist
- ✅ Pure, side-effect-free core logic
- ✅ Demonstrates composition and reuse
- ✅ Clear, production-relevant examples (no toy hello-world)
- ✅ Thorough comments explaining FP concepts and trade-offs
- ✅ TypeScript compiles without `any`
- ✅ Scripts added to `package.json`