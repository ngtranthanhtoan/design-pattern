/**
 * PROTOTYPE PATTERN - DOCUMENT TEMPLATE PROTOTYPE
 * ==============================================
 * 
 * This example demonstrates the Prototype pattern for document template management.
 * Document creation often involves expensive operations like:
 * - Loading template files from disk
 * - Parsing and setting up complex formatting
 * - Initializing layout engines
 * - Loading assets (images, fonts, styles)
 * - Setting up document structure and metadata
 * 
 * Instead of repeating these expensive operations, we create prototype templates
 * that can be quickly cloned and customized for specific documents.
 * 
 * REAL-WORLD APPLICATIONS:
 * - Word processors (Microsoft Word, Google Docs templates)
 * - Report generators (financial reports, analytics dashboards)
 * - Invoice and receipt systems
 * - Email template systems
 * - PDF document generators
 * - Legal document management systems
 */

import { exit } from "process";

// ============================================================================
// DOCUMENT INTERFACES AND TYPES
// ============================================================================

interface DocumentStyle {
  fontFamily: string;
  fontSize: number;
  lineHeight: number;
  color: string;
  backgroundColor?: string;
  margin: {
    top: number;
    right: number;
    bottom: number;
    left: number;
  };
}

interface DocumentHeader {
  title: string;
  subtitle?: string;
  logo?: string;
  metadata: {
    author: string;
    company: string;
    date: Date;
    version: string;
  };
}

interface DocumentSection {
  id: string;
  title: string;
  content: string;
  subsections: DocumentSubsection[];
  style?: Partial<DocumentStyle>;
}

interface DocumentSubsection {
  id: string;
  title: string;
  content: string;
  type: 'text' | 'table' | 'chart' | 'image' | 'list';
  data?: any;
}

interface DocumentFooter {
  content: string;
  pageNumbers: boolean;
  contactInfo?: string;
  disclaimer?: string;
}

interface TemplateConfiguration {
  type: 'invoice' | 'report' | 'contract' | 'email' | 'presentation';
  category: string;
  version: string;
  language: string;
  orientation: 'portrait' | 'landscape';
  pageSize: 'A4' | 'A3' | 'Letter' | 'Legal';
  encryption?: boolean;
  watermark?: string;
}

// ============================================================================
// DOCUMENT TEMPLATE PROTOTYPE
// ============================================================================

/**
 * Core document template prototype that can be cloned and customized
 * Simulates expensive document initialization operations
 */
class DocumentTemplatePrototype {
  protected header: DocumentHeader;
  protected sections: DocumentSection[];
  protected footer: DocumentFooter;
  protected style: DocumentStyle;
  protected config: TemplateConfiguration;
  protected assets: Map<string, string>;
  protected isInitialized: boolean = false;
  protected initializationCost: number = 0;

  constructor() {
    this.header = {
      title: 'Document Template',
      metadata: {
        author: 'System',
        company: 'Template Corp',
        date: new Date(),
        version: '1.0.0'
      }
    };

    this.sections = [];
    this.footer = {
      content: 'Generated by Template System',
      pageNumbers: true
    };

    this.style = {
      fontFamily: 'Arial',
      fontSize: 12,
      lineHeight: 1.5,
      color: '#000000',
      margin: { top: 20, right: 20, bottom: 20, left: 20 }
    };

    this.config = {
      type: 'report',
      category: 'general',
      version: '1.0.0',
      language: 'en',
      orientation: 'portrait',
      pageSize: 'A4'
    };

    this.assets = new Map();
  }

  /**
   * Expensive initialization process (simulated)
   * In real-world scenarios, this might involve:
   * - Loading template files from disk
   * - Parsing XML/HTML templates
   * - Loading fonts and assets
   * - Setting up rendering engine
   * - Validating template structure
   */
  async initializeTemplate(templatePath?: string): Promise<this> {
    if (this.isInitialized) {
      return this;
    }

    console.log('📄 Starting expensive template initialization...');
    const startTime = Date.now();

    // Simulate loading template file
    await this.simulateFileLoading(templatePath || './templates/default.docx');
    
    // Simulate parsing template structure
    await this.simulateTemplateParsing();
    
    // Simulate loading assets
    await this.simulateAssetLoading();
    
    // Simulate style compilation
    await this.simulateStyleCompilation();
    
    // Simulate layout engine setup
    await this.simulateLayoutSetup();

    this.initializationCost = Date.now() - startTime;
    this.isInitialized = true;

    console.log(`✅ Template initialized in ${this.initializationCost}ms`);
    return this;
  }

  /**
   * Clone the template (fast operation)
   * Creates a new instance with all expensive initialization already done
   */
  clone(): DocumentTemplatePrototype {
    if (!this.isInitialized) {
      throw new Error('Template must be initialized before cloning');
    }

    console.log('📋 Cloning document template (fast operation)...');
    const startTime = Date.now();

    const cloned = new DocumentTemplatePrototype();
    
    // Copy all initialized data without re-initialization
    cloned.header = {
      ...this.header,
      metadata: { ...this.header.metadata }
    };
    
    cloned.sections = this.sections.map(section => ({
      ...section,
      subsections: section.subsections.map(sub => ({ ...sub })),
      style: section.style ? { ...section.style } : undefined
    }));
    
    cloned.footer = { ...this.footer };
    cloned.style = { ...this.style, margin: { ...this.style.margin } };
    cloned.config = { ...this.config };
    cloned.assets = new Map(this.assets);
    cloned.isInitialized = true;
    cloned.initializationCost = this.initializationCost;

    const cloneTime = Date.now() - startTime;
    console.log(`✅ Template cloned in ${cloneTime}ms (${Math.round((this.initializationCost / cloneTime) * 100) / 100}x faster than initialization)`);

    return cloned;
  }

  /**
   * Deep clone with full independence (slower but safer)
   */
  deepClone(): DocumentTemplatePrototype {
    console.log('🔄 Deep cloning document template...');
    const serialized = JSON.stringify({
      header: this.header,
      sections: this.sections,
      footer: this.footer,
      style: this.style,
      config: this.config,
      assets: Array.from(this.assets.entries()),
      isInitialized: this.isInitialized,
      initializationCost: this.initializationCost
    });

    const parsed = JSON.parse(serialized);
    const cloned = new DocumentTemplatePrototype();
    
    Object.assign(cloned, parsed);
    cloned.assets = new Map(parsed.assets);
    
    return cloned;
  }

  // ============================================================================
  // TEMPLATE CONFIGURATION METHODS
  // ============================================================================

  setType(type: TemplateConfiguration['type']): this {
    this.config.type = type;
    return this;
  }

  setTitle(title: string): this {
    this.header.title = title;
    return this;
  }

  setSubtitle(subtitle: string): this {
    this.header.subtitle = subtitle;
    return this;
  }

  setAuthor(author: string): this {
    this.header.metadata.author = author;
    return this;
  }

  setCompany(company: string): this {
    this.header.metadata.company = company;
    return this;
  }

  setLogo(logoPath: string): this {
    this.header.logo = logoPath;
    this.assets.set('logo', logoPath);
    return this;
  }

  setStyle(style: Partial<DocumentStyle>): this {
    Object.assign(this.style, style);
    return this;
  }

  setPageConfiguration(config: Partial<TemplateConfiguration>): this {
    Object.assign(this.config, config);
    return this;
  }

  addSection(id: string, title: string, content: string): this {
    const section: DocumentSection = {
      id,
      title,
      content,
      subsections: []
    };
    this.sections.push(section);
    return this;
  }

  addSubsection(sectionId: string, title: string, content: string, type: DocumentSubsection['type'] = 'text', data?: any): this {
    const section = this.sections.find(s => s.id === sectionId);
    if (section) {
      section.subsections.push({
        id: `${sectionId}_sub_${section.subsections.length + 1}`,
        title,
        content,
        type,
        data
      });
    }
    return this;
  }

  setFooter(content: string, options?: { pageNumbers?: boolean; contactInfo?: string; disclaimer?: string }): this {
    this.footer.content = content;
    if (options) {
      Object.assign(this.footer, options);
    }
    return this;
  }

  addAsset(name: string, path: string): this {
    this.assets.set(name, path);
    return this;
  }

  // ============================================================================
  // DOCUMENT GENERATION METHODS
  // ============================================================================

  /**
   * Generate document content (simulated)
   */
  generateDocument(): string {
    const lines: string[] = [];
    
    lines.push(`=== ${this.header.title.toUpperCase()} ===`);
    if (this.header.subtitle) {
      lines.push(`Subtitle: ${this.header.subtitle}`);
    }
    lines.push(`Author: ${this.header.metadata.author}`);
    lines.push(`Company: ${this.header.metadata.company}`);
    lines.push(`Date: ${this.header.metadata.date.toLocaleDateString()}`);
    lines.push('');

    this.sections.forEach(section => {
      lines.push(`## ${section.title}`);
      lines.push(section.content);
      
      section.subsections.forEach(subsection => {
        lines.push(`### ${subsection.title}`);
        lines.push(subsection.content);
        if (subsection.data) {
          lines.push(`Data: ${JSON.stringify(subsection.data, null, 2)}`);
        }
      });
      lines.push('');
    });

    lines.push('---');
    lines.push(this.footer.content);
    if (this.footer.pageNumbers) {
      lines.push('Page 1 of 1');
    }

    return lines.join('\n');
  }

  /**
   * Export document to different formats (simulated)
   */
  exportToPDF(): string {
    return `PDF Export: ${this.generateDocument()}`;
  }

  exportToHTML(): string {
    const html = this.generateDocument()
      .replace(/=== (.*) ===/g, '<h1>$1</h1>')
      .replace(/## (.*)/g, '<h2>$1</h2>')
      .replace(/### (.*)/g, '<h3>$1</h3>')
      .replace(/\n/g, '<br>\n');
    
    return `<html><body>${html}</body></html>`;
  }

  exportToMarkdown(): string {
    return this.generateDocument()
      .replace(/=== (.*) ===/g, '# $1')
      .replace(/## (.*)/g, '## $1')
      .replace(/### (.*)/g, '### $1');
  }

  // ============================================================================
  // SIMULATION METHODS (EXPENSIVE OPERATIONS)
  // ============================================================================

  private async simulateFileLoading(path: string): Promise<void> {
    console.log(`  🔍 Loading template file: ${path}`);
    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
  }

  private async simulateTemplateParsing(): Promise<void> {
    console.log('  📝 Parsing template structure');
    await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 100));
  }

  private async simulateAssetLoading(): Promise<void> {
    console.log('  🖼️ Loading template assets');
    await new Promise(resolve => setTimeout(resolve, 80 + Math.random() * 120));
  }

  private async simulateStyleCompilation(): Promise<void> {
    console.log('  🎨 Compiling styles and themes');
    await new Promise(resolve => setTimeout(resolve, 60 + Math.random() * 100));
  }

  private async simulateLayoutSetup(): Promise<void> {
    console.log('  📐 Setting up layout engine');
    await new Promise(resolve => setTimeout(resolve, 70 + Math.random() * 130));
  }

  // ============================================================================
  // UTILITY METHODS
  // ============================================================================

  getMetadata(): any {
    return {
      type: this.config.type,
      category: this.config.category,
      sectionsCount: this.sections.length,
      assetsCount: this.assets.size,
      isInitialized: this.isInitialized,
      initializationCost: this.initializationCost
    };
  }

  toString(): string {
    return `DocumentTemplate(${this.config.type}): "${this.header.title}" - ${this.sections.length} sections, ${this.assets.size} assets`;
  }
}

// ============================================================================
// SPECIALIZED DOCUMENT TEMPLATES
// ============================================================================

/**
 * Invoice template specialized for billing documents
 */
class InvoiceTemplate extends DocumentTemplatePrototype {
  private customerInfo: any = {};
  private items: any[] = [];
  private totals: any = {};

  static async createPrototype(): Promise<InvoiceTemplate> {
    const template = new InvoiceTemplate();
    await template.initializeInvoiceTemplate();
    return template;
  }

  private async initializeInvoiceTemplate(): Promise<void> {
    await this.initializeTemplate('./templates/invoice-template.docx');
    
    this.setType('invoice')
      .setTitle('INVOICE')
      .setStyle({ fontSize: 10, fontFamily: 'Helvetica' })
      .addSection('customer_info', 'Customer Information', 'Customer details will be populated here')
      .addSection('items', 'Items and Services', 'Invoice items will be listed here')
      .addSection('totals', 'Payment Summary', 'Totals and payment terms')
      .setFooter('Thank you for your business!', {
        pageNumbers: true,
        disclaimer: 'Payment due within 30 days'
      });
  }

  override clone(): InvoiceTemplate {
    const cloned = super.clone() as InvoiceTemplate;
    cloned.customerInfo = { ...this.customerInfo };
    cloned.items = [...this.items];
    cloned.totals = { ...this.totals };
    return cloned;
  }

  setCustomer(customerInfo: any): this {
    this.customerInfo = customerInfo;
    const section = this.sections.find(s => s.id === 'customer_info');
    if (section) {
      section.content = `
        Name: ${customerInfo.name}
        Address: ${customerInfo.address}
        Email: ${customerInfo.email}
        Phone: ${customerInfo.phone}
      `;
    }
    return this;
  }

  addItem(description: string, quantity: number, unitPrice: number): this {
    const total = quantity * unitPrice;
    this.items.push({ description, quantity, unitPrice, total });
    this.recalculateTotals();
    return this;
  }

  private recalculateTotals(): void {
    const subtotal = this.items.reduce((sum, item) => sum + item.total, 0);
    const tax = subtotal * 0.1; // 10% tax
    const total = subtotal + tax;

    this.totals = { subtotal, tax, total };

    const section = this.sections.find(s => s.id === 'totals');
    if (section) {
      section.content = `
        Subtotal: $${subtotal.toFixed(2)}
        Tax (10%): $${tax.toFixed(2)}
        Total: $${total.toFixed(2)}
      `;
    }
  }
}

/**
 * Report template specialized for business reports
 */
class ReportTemplate extends DocumentTemplatePrototype {
  private reportData: any = {};
  private charts: any[] = [];

  static async createPrototype(): Promise<ReportTemplate> {
    const template = new ReportTemplate();
    await template.initializeReportTemplate();
    return template;
  }

  private async initializeReportTemplate(): Promise<void> {
    await this.initializeTemplate('./templates/report-template.docx');
    
    this.setType('report')
      .setTitle('Business Report')
      .setStyle({ fontSize: 12, fontFamily: 'Arial', lineHeight: 1.6 })
      .addSection('executive_summary', 'Executive Summary', 'Key findings and recommendations')
      .addSection('analysis', 'Detailed Analysis', 'In-depth analysis of data and trends')
      .addSection('conclusions', 'Conclusions', 'Summary of findings and next steps')
      .setFooter('Confidential Business Report', {
        pageNumbers: true,
        disclaimer: 'This report contains confidential information'
      });
  }

  override clone(): ReportTemplate {
    const cloned = super.clone() as ReportTemplate;
    cloned.reportData = { ...this.reportData };
    cloned.charts = [...this.charts];
    return cloned;
  }

  setReportPeriod(period: string): this {
    this.reportData.period = period;
    this.setSubtitle(`Report for ${period}`);
    return this;
  }

  addDataAnalysis(title: string, data: any): this {
    this.addSubsection('analysis', title, `Analysis of ${title}`, 'chart', data);
    return this;
  }

  addChart(title: string, chartData: any): this {
    this.charts.push({ title, data: chartData });
    this.addSubsection('analysis', title, `Chart: ${title}`, 'chart', chartData);
    return this;
  }
}

// ============================================================================
// TEMPLATE REGISTRY SYSTEM
// ============================================================================

/**
 * Centralized registry for managing document template prototypes
 */
class DocumentTemplateRegistry {
  private templates = new Map<string, DocumentTemplatePrototype>();
  private usage = new Map<string, number>();

  async registerTemplate(name: string, template: DocumentTemplatePrototype): Promise<void> {
    if (!template.getMetadata().isInitialized) {
      await template.initializeTemplate();
    }
    this.templates.set(name, template);
    this.usage.set(name, 0);
    console.log(`📋 Registered template: ${name}`);
  }

  createDocument(templateName: string): DocumentTemplatePrototype | null {
    const template = this.templates.get(templateName);
    if (!template) {
      console.log(`❌ Template not found: ${templateName}`);
      return null;
    }

    const current = this.usage.get(templateName) || 0;
    this.usage.set(templateName, current + 1);

    return template.clone();
  }

  listTemplates(): string[] {
    return Array.from(this.templates.keys());
  }

  getUsageStats(): Map<string, number> {
    return new Map(this.usage);
  }

  removeTemplate(name: string): boolean {
    const success = this.templates.delete(name) && this.usage.delete(name);
    if (success) {
      console.log(`🗑️ Removed template: ${name}`);
    }
    return success;
  }
}

// ============================================================================
// DEMONSTRATION FUNCTIONS
// ============================================================================

/**
 * Demonstrate basic document template prototyping
 */
async function demonstrateBasicDocumentPrototyping(): Promise<void> {
  console.log('\n📄 BASIC DOCUMENT TEMPLATE PROTOTYPING');
  console.log('======================================');

  // Create and initialize an expensive document template
  const baseTemplate = new DocumentTemplatePrototype();
  await baseTemplate.initializeTemplate('./templates/company-report.docx');

  baseTemplate
    .setType('report')
    .setTitle('Company Report Template')
    .setAuthor('Report Generator')
    .setCompany('Tech Corp')
    .setLogo('./assets/logo.png')
    .addSection('overview', 'Company Overview', 'Overview of company performance and metrics')
    .addSection('financials', 'Financial Summary', 'Financial highlights and key metrics')
    .addSection('operations', 'Operations Report', 'Operational performance and improvements');

  console.log('📊 Base template:', baseTemplate.toString());

  // Clone for different reports (fast operation)
  const quarterlyReport = baseTemplate.clone()
    .setTitle('Q2 2024 Quarterly Report')
    .setSubtitle('Financial and Operational Performance')
    .addSubsection('financials', 'Revenue Growth', 'Q2 revenue increased by 15%', 'chart', { growth: '15%' })
    .addSubsection('operations', 'Team Expansion', 'Added 25 new team members', 'text');

  const monthlyReport = baseTemplate.clone()
    .setTitle('June 2024 Monthly Report')
    .setSubtitle('Monthly Performance Summary')
    .addSubsection('overview', 'Key Achievements', 'Major milestones reached in June', 'list')
    .addSubsection('financials', 'Monthly Revenue', 'June revenue performance', 'chart');

  console.log('📈 Quarterly Report:', quarterlyReport.toString());
  console.log('📅 Monthly Report:', monthlyReport.toString());

  // Generate sample documents
  console.log('\n📋 Generated Document Preview:');
  console.log(quarterlyReport.generateDocument().substring(0, 300) + '...');
}

/**
 * Demonstrate specialized templates (Invoice and Report)
 */
async function demonstrateSpecializedTemplates(): Promise<void> {
  console.log('\n💼 SPECIALIZED TEMPLATE DEMONSTRATION');
  console.log('====================================');

  // Create invoice template prototype
  const invoicePrototype = await InvoiceTemplate.createPrototype();
  console.log('💳 Invoice template initialized');

  // Create specific invoices
  const customerInvoice = invoicePrototype.clone()
    .setTitle('INVOICE #INV-2024-001')
    .setCustomer({
      name: 'ABC Company',
      address: '123 Business St, City, State 12345',
      email: 'billing@abccompany.com',
      phone: '(555) 123-4567'
    })
    .addItem('Web Development Services', 40, 125.00)
    .addItem('Database Setup', 8, 150.00)
    .addItem('Testing and QA', 16, 100.00);

  const serviceInvoice = invoicePrototype.clone()
    .setTitle('INVOICE #INV-2024-002')
    .setCustomer({
      name: 'XYZ Corporation',
      address: '456 Corporate Ave, Business City 67890',
      email: 'accounting@xyzcorp.com',
      phone: '(555) 987-6543'
    })
    .addItem('Consulting Services', 20, 200.00)
    .addItem('System Integration', 12, 175.00);

  console.log('📄 Customer Invoice:', customerInvoice.toString());
  console.log('📄 Service Invoice:', serviceInvoice.toString());

  // Create report template prototype
  const reportPrototype = await ReportTemplate.createPrototype();
  console.log('📊 Report template initialized');

  // Create specific reports
  const salesReport = reportPrototype.clone()
    .setTitle('Sales Performance Report')
    .setReportPeriod('Q2 2024')
    .setAuthor('Sales Director')
    .addDataAnalysis('Regional Sales', { north: 125000, south: 98000, east: 145000, west: 112000 })
    .addChart('Monthly Trends', { jan: 45000, feb: 52000, mar: 48000, apr: 58000, may: 61000, jun: 55000 });

  const operationsReport = reportPrototype.clone()
    .setTitle('Operations Efficiency Report')
    .setReportPeriod('June 2024')
    .setAuthor('Operations Manager')
    .addDataAnalysis('Process Metrics', { efficiency: '92%', defects: '0.8%', throughput: '145 units/hour' })
    .addChart('Daily Performance', { week1: 140, week2: 145, week3: 148, week4: 142 });

  console.log('📈 Sales Report:', salesReport.toString());
  console.log('⚙️ Operations Report:', operationsReport.toString());
}

/**
 * Demonstrate template registry system
 */
async function demonstrateTemplateRegistry(): Promise<void> {
  console.log('\n📋 TEMPLATE REGISTRY DEMONSTRATION');
  console.log('=================================');

  const registry = new DocumentTemplateRegistry();

  // Create and register various templates
  const basicTemplate = new DocumentTemplatePrototype();
  await basicTemplate.initializeTemplate();
  basicTemplate.setTitle('Basic Document Template').setType('report');

  const invoiceTemplate = await InvoiceTemplate.createPrototype();
  const reportTemplate = await ReportTemplate.createPrototype();

  await registry.registerTemplate('basic', basicTemplate);
  await registry.registerTemplate('invoice', invoiceTemplate);
  await registry.registerTemplate('report', reportTemplate);

  console.log('📋 Available templates:', registry.listTemplates());

  // Create documents from registry
  const doc1 = registry.createDocument('invoice');
  const doc2 = registry.createDocument('report');
  const doc3 = registry.createDocument('basic');
  const doc4 = registry.createDocument('invoice'); // Another invoice

  if (doc1 && doc2 && doc3 && doc4) {
    console.log('✅ Created 4 documents from registry');
    
    // Show usage statistics
    console.log('\n📊 Template Usage Statistics:');
    const stats = registry.getUsageStats();
    stats.forEach((count, template) => {
      console.log(`  ${template}: ${count} documents created`);
    });
  }
}

/**
 * Demonstrate performance comparison
 */
async function demonstratePerformanceComparison(): Promise<void> {
  console.log('\n⚡ PERFORMANCE COMPARISON');
  console.log('========================');

  const iterations = 100;
  console.log(`🔧 Testing with ${iterations} document creations...`);

  // Create prototype once
  const prototype = new DocumentTemplatePrototype();
  await prototype.initializeTemplate();
  prototype
    .setTitle('Performance Test Template')
    .addSection('section1', 'Section 1', 'Content 1')
    .addSection('section2', 'Section 2', 'Content 2')
    .addSection('section3', 'Section 3', 'Content 3');

  // Test prototype cloning
  console.time('⚡ Prototype Cloning');
  const cloned = [];
  for (let i = 0; i < iterations; i++) {
    const doc = prototype.clone();
    doc.setTitle(`Document ${i + 1}`);
    cloned.push(doc);
  }
  console.timeEnd('⚡ Prototype Cloning');

  // Test traditional creation (simulated)
  console.time('🏗️ Traditional Creation');
  const created = [];
  for (let i = 0; i < iterations; i++) {
    const doc = new DocumentTemplatePrototype();
    await doc.initializeTemplate(); // Expensive operation each time
    doc.setTitle(`Document ${i + 1}`)
       .addSection('section1', 'Section 1', 'Content 1')
       .addSection('section2', 'Section 2', 'Content 2')
       .addSection('section3', 'Section 3', 'Content 3');
    created.push(doc);
  }
  console.timeEnd('🏗️ Traditional Creation');

  console.log(`📄 Created ${cloned.length} cloned documents and ${created.length} traditional documents`);
  console.log('📈 Prototype cloning is significantly faster for document creation!');
}

/**
 * Main demonstration function
 */
async function demonstrateDocumentTemplatePrototype(): Promise<void> {
  console.log('🎯 DOCUMENT TEMPLATE PROTOTYPE PATTERN');
  console.log('======================================');
  console.log('Creating documents by cloning pre-initialized templates');
  console.log('instead of repeating expensive setup operations.\n');

  await demonstrateBasicDocumentPrototyping();
  await demonstrateSpecializedTemplates();
  await demonstrateTemplateRegistry();
  await demonstratePerformanceComparison();

  console.log('\n✅ DOCUMENT TEMPLATE PROTOTYPE BENEFITS:');
  console.log('- Fast document creation through cloning vs. initialization');
  console.log('- Consistent document structure and formatting');
  console.log('- Specialized templates for different document types');
  console.log('- Centralized template management via registry');
  console.log('- Easy customization of cloned templates');
  console.log('- Significant performance improvement for complex documents');

  console.log('\n🏭 REAL-WORLD APPLICATIONS:');
  console.log('- Microsoft Word/Google Docs template systems');
  console.log('- Invoice and billing document generators');
  console.log('- Report generation systems (financial, analytics)');
  console.log('- Email template management platforms');
  console.log('- Legal document automation systems');
  console.log('- PDF generation and document workflow systems');
}

// ============================================================================
// EXECUTION
// ============================================================================

if (require.main === module) {
  demonstrateDocumentTemplatePrototype().catch(console.error);
}

export {
  DocumentTemplatePrototype,
  InvoiceTemplate,
  ReportTemplate,
  DocumentTemplateRegistry,
  demonstrateDocumentTemplatePrototype
};

exit(0); 