// ============================================================================
// DOCUMENT BUILDER - Complex Document Construction with Hierarchical Structure
// ============================================================================

import { exit } from "process";

// Document interfaces and types
interface DocumentMetadata {
  title?: string;
  author?: string;
  subject?: string;
  keywords?: string[];
  createdDate?: Date;
  modifiedDate?: Date;
  version?: string;
}

interface DocumentHeader {
  logo?: string;
  title?: string;
  subtitle?: string;
  date?: Date;
  pageNumbers?: boolean;
}

interface DocumentFooter {
  text?: string;
  showPageNumbers?: boolean;
  companyInfo?: string;
  confidentiality?: string;
}

interface TableOptions {
  striped?: boolean;
  borders?: boolean;
  headerStyle?: 'bold' | 'colored' | 'none';
  cellPadding?: number;
  width?: 'auto' | 'full' | number;
}

interface ChartData {
  type: 'bar' | 'line' | 'pie' | 'scatter';
  data: any[];
  labels?: string[];
  title?: string;
  colors?: string[];
}

interface PDFDocument {
  readonly metadata: DocumentMetadata;
  readonly header?: DocumentHeader;
  readonly footer?: DocumentFooter;
  readonly sections: DocumentSection[];
  readonly styles: any;
  readonly pageLayout: {
    margin: { top: number; right: number; bottom: number; left: number };
    orientation: 'portrait' | 'landscape';
    size: 'A4' | 'A3' | 'letter' | 'legal';
  };
}

interface DocumentSection {
  readonly title: string;
  readonly level: number;
  readonly content: DocumentContent[];
}

interface DocumentContent {
  readonly type: 'paragraph' | 'list' | 'table' | 'chart' | 'image' | 'pageBreak' | 'subSection';
  readonly data: any;
  readonly options?: any;
}

interface EmailTemplate {
  readonly subject: string;
  readonly from: string;
  readonly to?: string[];
  readonly cc?: string[];
  readonly bcc?: string[];
  readonly template: string;
  readonly header?: any;
  readonly content: EmailContent[];
  readonly footer?: any;
  readonly attachments?: string[];
}

interface EmailContent {
  readonly type: 'greeting' | 'paragraph' | 'button' | 'list' | 'image' | 'divider' | 'social';
  readonly data: any;
  readonly style?: any;
}

// ============================================================================
// PDF DOCUMENT BUILDER
// ============================================================================

class PDFDocumentBuilder {
  private documentMetadata: DocumentMetadata = {};
  private documentHeader?: DocumentHeader;
  private documentFooter?: DocumentFooter;
  private documentSections: DocumentSection[] = [];
  private currentSection?: DocumentSectionBuilder;
  private documentStyles: any = {
    fontSize: 12,
    fontFamily: 'Arial',
    lineHeight: 1.5,
    textColor: '#000000'
  };
  private documentPageLayout = {
    margin: { top: 72, right: 72, bottom: 72, left: 72 },
    orientation: 'portrait' as const,
    size: 'A4' as const
  };

  title(title: string): this {
    this.documentMetadata.title = title;
    return this;
  }

  metadata(metadata: Partial<DocumentMetadata>): this {
    this.documentMetadata = {
      ...this.documentMetadata,
      ...metadata,
      createdDate: new Date(),
      modifiedDate: new Date()
    };
    return this;
  }

  header(): DocumentHeaderBuilder {
    return new DocumentHeaderBuilder(this);
  }

  footer(text?: string): this {
    this.documentFooter = {
      text: text || '',
      showPageNumbers: true,
      companyInfo: 'Generated by Document Builder',
      confidentiality: 'Internal Use Only'
    };
    return this;
  }

  section(title: string): DocumentSectionBuilder {
    // Finalize current section if exists
    if (this.currentSection) {
      this.documentSections.push(this.currentSection.build());
    }
    
    this.currentSection = new DocumentSectionBuilder(this, title, 1);
    return this.currentSection;
  }

  pageLayout(layout: Partial<typeof this.documentPageLayout>): this {
    this.documentPageLayout = { ...this.documentPageLayout, ...layout };
    return this;
  }

  styles(styles: Partial<typeof this.documentStyles>): this {
    this.documentStyles = { ...this.documentStyles, ...styles };
    return this;
  }

  build(): PDFDocument {
    // Finalize current section if exists
    if (this.currentSection) {
      this.documentSections.push(this.currentSection.build());
    }

    if (this.documentSections.length === 0) {
      throw new Error('Document must have at least one section');
    }

    if (!this.documentMetadata.title) {
      throw new Error('Document title is required');
    }

    return Object.freeze({
      metadata: { ...this.documentMetadata },
      header: this.documentHeader ? { ...this.documentHeader } : undefined,
      footer: this.documentFooter ? { ...this.documentFooter } : undefined,
      sections: this.documentSections.map(s => ({ ...s })),
      styles: { ...this.documentStyles },
      pageLayout: { ...this.documentPageLayout }
    });
  }

  // Internal method to set header
  setHeader(header: DocumentHeader): this {
    this.documentHeader = header;
    return this;
  }
}

// Header builder for hierarchical construction
class DocumentHeaderBuilder {
  private parent: PDFDocumentBuilder;
  private headerData: DocumentHeader = {};

  constructor(parent: PDFDocumentBuilder) {
    this.parent = parent;
  }

  logo(logoPath: string): this {
    this.headerData.logo = logoPath;
    return this;
  }

  title(title: string): this {
    this.headerData.title = title;
    return this;
  }

  subtitle(subtitle: string): this {
    this.headerData.subtitle = subtitle;
    return this;
  }

  date(date?: Date): this {
    this.headerData.date = date || new Date();
    return this;
  }

  pageNumbers(show: boolean = true): this {
    this.headerData.pageNumbers = show;
    return this;
  }

  done(): PDFDocumentBuilder {
    return this.parent.setHeader(this.headerData);
  }
}

// Section builder for hierarchical construction
class DocumentSectionBuilder {
  private parent: PDFDocumentBuilder;
  private title: string;
  private level: number;
  private content: DocumentContent[] = [];

  constructor(parent: PDFDocumentBuilder, title: string, level: number) {
    this.parent = parent;
    this.title = title;
    this.level = level;
  }

  paragraph(text: string): this {
    this.content.push({
      type: 'paragraph',
      data: text
    });
    return this;
  }

  list(items: string[], type: 'ordered' | 'unordered' = 'unordered'): this {
    this.content.push({
      type: 'list',
      data: items,
      options: { type }
    });
    return this;
  }

  table(name: string, data: any[], options?: TableOptions): this {
    if (!data || data.length === 0) {
      throw new Error('Table data cannot be empty');
    }

    this.content.push({
      type: 'table',
      data: {
        name,
        rows: data,
        headers: Object.keys(data[0] || {})
      },
      options: options || { striped: true, borders: true }
    });
    return this;
  }

  chart(name: string, chartData: ChartData): this {
    this.content.push({
      type: 'chart',
      data: {
        name,
        ...chartData
      }
    });
    return this;
  }

  image(path: string, caption?: string): this {
    this.content.push({
      type: 'image',
      data: { path, caption }
    });
    return this;
  }

  pageBreak(): this {
    this.content.push({
      type: 'pageBreak',
      data: null
    });
    return this;
  }

  subSection(title: string): DocumentSubSectionBuilder {
    return new DocumentSubSectionBuilder(this, title, this.level + 1);
  }

  done(): PDFDocumentBuilder {
    return this.parent;
  }

  build(): DocumentSection {
    return {
      title: this.title,
      level: this.level,
      content: [...this.content]
    };
  }

  // Internal method to add content from subsection
  addContent(content: DocumentContent[]): this {
    this.content.push(...content);
    return this;
  }
}

// Subsection builder for deeper hierarchical construction
class DocumentSubSectionBuilder {
  private parent: DocumentSectionBuilder;
  private title: string;
  private level: number;
  private content: DocumentContent[] = [];

  constructor(parent: DocumentSectionBuilder, title: string, level: number) {
    this.parent = parent;
    this.title = title;
    this.level = level;
  }

  paragraph(text: string): this {
    this.content.push({
      type: 'paragraph',
      data: text
    });
    return this;
  }

  list(items: string[], type: 'ordered' | 'unordered' = 'unordered'): this {
    this.content.push({
      type: 'list',
      data: items,
      options: { type }
    });
    return this;
  }

  table(name: string, data: any[], options?: TableOptions): this {
    this.content.push({
      type: 'table',
      data: {
        name,
        rows: data,
        headers: Object.keys(data[0] || {})
      },
      options: options || { striped: true, borders: true }
    });
    return this;
  }

  done(): DocumentSectionBuilder {
    // Add subsection as content
    this.parent.addContent([
      {
        type: 'subSection',
        data: {
          title: this.title,
          level: this.level,
          content: [...this.content]
        }
      }
    ]);
    return this.parent;
  }
}

// ============================================================================
// EMAIL TEMPLATE BUILDER
// ============================================================================

class EmailTemplateBuilder {
  private emailData: Partial<Omit<EmailTemplate, 'readonly'>> & {
    subject?: string;
    from?: string;
    to?: string[];
    cc?: string[];
    bcc?: string[];
    template?: string;
    header?: any;
    content?: EmailContent[];
    footer?: any;
    attachments?: string[];
  } = {
    content: [],
    attachments: []
  };

  subject(subject: string): this {
    if (!subject || subject.trim() === '') {
      throw new Error('Email subject cannot be empty');
    }
    this.emailData.subject = subject.trim();
    return this;
  }

  from(from: string): this {
    if (!from || !this.isValidEmail(from)) {
      throw new Error('Invalid from email address');
    }
    this.emailData.from = from;
    return this;
  }

  to(emails: string | string[]): this {
    const emailList = Array.isArray(emails) ? emails : [emails];
    const invalidEmails = emailList.filter(email => !this.isValidEmail(email));
    
    if (invalidEmails.length > 0) {
      throw new Error(`Invalid email addresses: ${invalidEmails.join(', ')}`);
    }
    
    this.emailData.to = emailList;
    return this;
  }

  cc(emails: string | string[]): this {
    const emailList = Array.isArray(emails) ? emails : [emails];
    this.emailData.cc = emailList;
    return this;
  }

  bcc(emails: string | string[]): this {
    const emailList = Array.isArray(emails) ? emails : [emails];
    this.emailData.bcc = emailList;
    return this;
  }

  template(templateName: string): this {
    this.emailData.template = templateName;
    return this;
  }

  header(config: { logo?: string; title?: string; backgroundColor?: string }): this {
    this.emailData.header = config;
    return this;
  }

  content(): EmailContentBuilder {
    return new EmailContentBuilder(this);
  }

  footer(config: { unsubscribe?: boolean; social?: string[]; companyInfo?: string }): this {
    this.emailData.footer = config;
    return this;
  }

  attachment(filePath: string): this {
    if (!this.emailData.attachments) {
      this.emailData.attachments = [];
    }
    this.emailData.attachments.push(filePath);
    return this;
  }

  build(): EmailTemplate {
    if (!this.emailData.subject) {
      throw new Error('Email subject is required');
    }
    if (!this.emailData.from) {
      throw new Error('From address is required');
    }
    if (!this.emailData.content || this.emailData.content.length === 0) {
      throw new Error('Email content is required');
    }

    return Object.freeze({
      subject: this.emailData.subject,
      from: this.emailData.from,
      to: this.emailData.to ? [...this.emailData.to] : undefined,
      cc: this.emailData.cc ? [...this.emailData.cc] : undefined,
      bcc: this.emailData.bcc ? [...this.emailData.bcc] : undefined,
      template: this.emailData.template || 'default',
      header: this.emailData.header,
      content: [...this.emailData.content!],
      footer: this.emailData.footer,
      attachments: this.emailData.attachments ? [...this.emailData.attachments] : undefined
    });
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // Internal method to set content
  setContent(content: EmailContent[]): this {
    this.emailData.content = content;
    return this;
  }
}

// Email content builder for hierarchical construction
class EmailContentBuilder {
  private parent: EmailTemplateBuilder;
  private contentItems: EmailContent[] = [];

  constructor(parent: EmailTemplateBuilder) {
    this.parent = parent;
  }

  greeting(text: string): this {
    this.contentItems.push({
      type: 'greeting',
      data: text,
      style: { fontSize: '18px', fontWeight: 'bold', marginBottom: '20px' }
    });
    return this;
  }

  paragraph(text: string, style?: any): this {
    this.contentItems.push({
      type: 'paragraph',
      data: text,
      style: style || { fontSize: '14px', lineHeight: '1.6', marginBottom: '15px' }
    });
    return this;
  }

  button(text: string, url: string, style?: any): this {
    this.contentItems.push({
      type: 'button',
      data: { text, url },
      style: style || {
        backgroundColor: '#007bff',
        color: 'white',
        padding: '12px 24px',
        borderRadius: '4px',
        textDecoration: 'none',
        display: 'inline-block',
        margin: '20px 0'
      }
    });
    return this;
  }

  list(items: string[], type: 'ordered' | 'unordered' = 'unordered'): this {
    this.contentItems.push({
      type: 'list',
      data: items,
      style: { marginBottom: '20px', paddingLeft: type === 'ordered' ? '20px' : '15px' }
    });
    return this;
  }

  image(src: string, alt: string, style?: any): this {
    this.contentItems.push({
      type: 'image',
      data: { src, alt },
      style: style || { maxWidth: '100%', height: 'auto', marginBottom: '20px' }
    });
    return this;
  }

  divider(): this {
    this.contentItems.push({
      type: 'divider',
      data: null,
      style: {
        borderTop: '1px solid #eee',
        margin: '30px 0',
        width: '100%'
      }
    });
    return this;
  }

  social(platforms: { name: string; url: string; icon?: string }[]): this {
    this.contentItems.push({
      type: 'social',
      data: platforms,
      style: {
        textAlign: 'center',
        marginTop: '30px'
      }
    });
    return this;
  }

  done(): EmailTemplateBuilder {
    return this.parent.setContent(this.contentItems);
  }
}

// ============================================================================
// DOCUMENT RENDERERS (Simulated)
// ============================================================================

class DocumentRenderer {
  static renderPDF(document: PDFDocument): string {
    let output = `PDF Document: ${document.metadata.title}\n`;
    output += `Author: ${document.metadata.author || 'Unknown'}\n`;
    output += `Created: ${document.metadata.createdDate?.toLocaleDateString()}\n`;
    output += `Pages: ${document.pageLayout.size} ${document.pageLayout.orientation}\n\n`;

    if (document.header) {
      output += `HEADER:\n`;
      output += `  Title: ${document.header.title}\n`;
      output += `  Subtitle: ${document.header.subtitle}\n`;
      if (document.header.logo) output += `  Logo: ${document.header.logo}\n`;
      output += '\n';
    }

    for (const section of document.sections) {
      output += `${section.title.toUpperCase()}\n`;
      output += '='.repeat(section.title.length) + '\n\n';

      for (const content of section.content) {
        switch (content.type) {
          case 'paragraph':
            output += `${content.data}\n\n`;
            break;
          case 'list':
            const items = content.data as string[];
            items.forEach((item, index) => {
              const bullet = content.options?.type === 'ordered' ? `${index + 1}.` : '•';
              output += `  ${bullet} ${item}\n`;
            });
            output += '\n';
            break;
          case 'table':
            output += `Table: ${content.data.name}\n`;
            output += `Rows: ${content.data.rows.length}\n`;
            output += `Columns: ${content.data.headers.join(', ')}\n\n`;
            break;
          case 'chart':
            output += `Chart: ${content.data.name} (${content.data.type})\n`;
            output += `Data points: ${content.data.data.length}\n\n`;
            break;
          case 'pageBreak':
            output += '[PAGE BREAK]\n\n';
            break;
          case 'subSection':
            output += `  ${content.data.title}\n`;
            output += '  ' + '-'.repeat(content.data.title.length) + '\n';
            for (const subContent of content.data.content) {
              if (subContent.type === 'paragraph') {
                output += `  ${subContent.data}\n\n`;
              }
            }
            break;
        }
      }
    }

    if (document.footer) {
      output += `FOOTER:\n`;
      output += `  ${document.footer.text}\n`;
      output += `  ${document.footer.companyInfo}\n`;
      output += `  ${document.footer.confidentiality}\n`;
    }

    return output;
  }

  static renderEmail(template: EmailTemplate): string {
    let output = `Email Template: ${template.subject}\n`;
    output += `From: ${template.from}\n`;
    if (template.to) output += `To: ${template.to.join(', ')}\n`;
    output += `Template: ${template.template}\n\n`;

    if (template.header) {
      output += `HEADER:\n`;
      output += `  Title: ${template.header.title}\n`;
      if (template.header.logo) output += `  Logo: ${template.header.logo}\n`;
      output += '\n';
    }

    output += `CONTENT:\n`;
    for (const content of template.content) {
      switch (content.type) {
        case 'greeting':
          output += `  ${content.data}\n\n`;
          break;
        case 'paragraph':
          output += `  ${content.data}\n\n`;
          break;
        case 'button':
          output += `  [BUTTON: ${content.data.text} -> ${content.data.url}]\n\n`;
          break;
        case 'list':
          const items = content.data as string[];
          items.forEach(item => {
            output += `    • ${item}\n`;
          });
          output += '\n';
          break;
        case 'image':
          output += `  [IMAGE: ${content.data.alt} - ${content.data.src}]\n\n`;
          break;
        case 'divider':
          output += `  ${'─'.repeat(50)}\n\n`;
          break;
        case 'social':
          output += `  Social Links: ${content.data.map((p: any) => p.name).join(', ')}\n\n`;
          break;
      }
    }

    if (template.footer) {
      output += `FOOTER:\n`;
      if (template.footer.companyInfo) output += `  ${template.footer.companyInfo}\n`;
      if (template.footer.unsubscribe) output += `  [Unsubscribe Link]\n`;
      if (template.footer.social) output += `  Social: ${template.footer.social.join(', ')}\n`;
    }

    return output;
  }
}

// ============================================================================
// USAGE DEMONSTRATIONS
// ============================================================================

// Usage Example - Following the documented API exactly
async function demonstrateDocumentBuilder(): Promise<void> {
  console.log('=== DOCUMENT BUILDER DEMO ===');
  console.log('Following the documented API pattern:\n');

  // Sample data for demonstrations
  const monthlySalesData = [
    { month: 'Jan', sales: 45000, target: 50000 },
    { month: 'Feb', sales: 52000, target: 50000 },
    { month: 'Mar', sales: 48000, target: 55000 }
  ];

  const regionData = [
    { region: 'North', sales: 125000, growth: '15%' },
    { region: 'South', sales: 98000, growth: '8%' },
    { region: 'East', sales: 110000, growth: '12%' },
    { region: 'West', sales: 87000, growth: '5%' }
  ];

  const topPerformers = [
    'Alice Johnson - $15,000',
    'Bob Smith - $12,500',
    'Carol Davis - $11,800'
  ];

  // PDF Document Example
  console.log('--- PDF Document Building ---');
  
  try {
    const pdfReport = new PDFDocumentBuilder()
      .title('Monthly Sales Report')
      .metadata({ author: 'System', subject: 'Sales Analytics' })
      .header()
        .logo('./assets/company-logo.png')
        .title('Sales Department')
        .subtitle('Monthly Performance Report')
        .done()
      .section('Executive Summary')
        .paragraph('This month showed exceptional growth across all categories...')
        .chart('sales-trend', {
          type: 'line',
          data: monthlySalesData,
          title: 'Monthly Sales Trend'
        })
        .done()
      .section('Detailed Analysis')
        .table('sales-by-region', regionData, { striped: true, borders: true })
        .pageBreak()
        .subSection('Top Performers')
          .list(topPerformers, 'ordered')
          .done()
        .done()
      .footer('Confidential - Internal Use Only')
      .build();

    console.log('PDF Document Structure:');
    console.log(`Title: ${pdfReport.metadata.title}`);
    console.log(`Author: ${pdfReport.metadata.author}`);
    console.log(`Sections: ${pdfReport.sections.length}`);
    console.log(`Page Layout: ${pdfReport.pageLayout.size} ${pdfReport.pageLayout.orientation}`);
    console.log(`Header: ${pdfReport.header ? 'Yes' : 'No'}`);
    console.log(`Footer: ${pdfReport.footer ? 'Yes' : 'No'}`);

    // Render PDF (simulated)
    console.log('\nRendered PDF Preview:');
    console.log(DocumentRenderer.renderPDF(pdfReport));

  } catch (error) {
    console.error('❌ PDF document error:', error instanceof Error ? error.message : String(error));
  }

  console.log();

  // Email Template Example
  console.log('--- Email Template Building ---');
  
  try {
    const emailTemplate = new EmailTemplateBuilder()
      .subject('Welcome to Our Platform!')
      .from('noreply@company.com')
      .to(['user@example.com'])
      .template('welcome')
      .header({ logo: 'logo.png', title: 'Welcome!' })
      .content()
        .greeting('Hi {{firstName}}!')
        .paragraph('Thank you for joining our platform...')
        .button('Get Started', '{{activationLink}}')
        .divider()
        .paragraph('If you have any questions, feel free to reach out to our support team.')
        .social([
          { name: 'Twitter', url: 'https://twitter.com/company' },
          { name: 'LinkedIn', url: 'https://linkedin.com/company/company' }
        ])
        .done()
      .footer({ unsubscribe: true, social: ['twitter', 'linkedin'] })
      .build();

    console.log('Email Template Structure:');
    console.log(`Subject: ${emailTemplate.subject}`);
    console.log(`From: ${emailTemplate.from}`);
    console.log(`To: ${emailTemplate.to?.join(', ')}`);
    console.log(`Template: ${emailTemplate.template}`);
    console.log(`Content Items: ${emailTemplate.content.length}`);
    console.log(`Header: ${emailTemplate.header ? 'Yes' : 'No'}`);
    console.log(`Footer: ${emailTemplate.footer ? 'Yes' : 'No'}`);

    // Render Email (simulated)
    console.log('\nRendered Email Preview:');
    console.log(DocumentRenderer.renderEmail(emailTemplate));

  } catch (error) {
    console.error('❌ Email template error:', error instanceof Error ? error.message : String(error));
  }

  console.log();

  // Complex Document with Multiple Sections
  console.log('--- Complex Document with Multiple Sections ---');
  
  try {
    const complexDoc = new PDFDocumentBuilder()
      .title('Annual Report 2024')
      .metadata({
        author: 'Finance Team',
        subject: 'Company Annual Report',
        keywords: ['annual', 'report', '2024', 'financial']
      })
      .header()
        .logo('./assets/annual-logo.png')
        .title('Annual Report 2024')
        .subtitle('Company Performance Overview')
        .date(new Date('2024-12-31'))
        .done()
      .section('Company Overview')
        .paragraph('Our company has achieved remarkable growth this year...')
        .chart('revenue-growth', {
          type: 'bar',
          data: [
            { year: '2022', revenue: 1200000 },
            { year: '2023', revenue: 1450000 },
            { year: '2024', revenue: 1680000 }
          ],
          title: 'Revenue Growth'
        })
        .done()
      .section('Financial Performance')
        .table('quarterly-results', [
          { quarter: 'Q1', revenue: 420000, profit: 65000 },
          { quarter: 'Q2', revenue: 380000, profit: 58000 },
          { quarter: 'Q3', revenue: 445000, profit: 72000 },
          { quarter: 'Q4', revenue: 435000, profit: 68000 }
        ])
        .subSection('Key Metrics')
          .paragraph('This year we achieved several important milestones:')
          .list([
            'Revenue increased by 16% year-over-year',
            'Profit margin improved to 15.7%',
            'Customer satisfaction score reached 4.8/5',
            'Employee retention rate at 94%'
          ])
          .done()
        .done()
      .section('Future Outlook')
        .paragraph('Looking ahead to 2025, we expect continued growth...')
        .pageBreak()
        .subSection('Strategic Initiatives')
          .paragraph('Our key focus areas for the upcoming year include:')
          .list([
            'Digital transformation initiatives',
            'Sustainable business practices',
            'Market expansion in APAC region',
            'Innovation in product development'
          ], 'ordered')
          .done()
        .done()
      .footer('© 2024 Company Name. All rights reserved.')
      .build();

    console.log('Complex Document Structure:');
    console.log(`Title: ${complexDoc.metadata.title}`);
    console.log(`Sections: ${complexDoc.sections.length}`);
    console.log(`Total Content Items: ${complexDoc.sections.reduce((sum: number, s: DocumentSection) => sum + s.content.length, 0)}`);
    console.log(`Keywords: ${complexDoc.metadata.keywords?.join(', ')}`);

  } catch (error) {
    console.error('❌ Complex document error:', error instanceof Error ? error.message : String(error));
  }

  console.log(`\n✅ Successfully demonstrated document builders with hierarchical structure`);
}

// Testing Example
async function testDocumentBuilder(): Promise<void> {
  console.log('\n=== DOCUMENT BUILDER TESTS ===');
  
  // Test 1: Required field validation
  console.log('Test 1 - Required field validation:');
  try {
    new PDFDocumentBuilder().build();
    console.log('❌ Should have thrown error for missing title');
  } catch (error) {
    console.log('✅ Correctly validates required title field');
  }

  // Test 2: Hierarchical structure
  console.log('\nTest 2 - Hierarchical structure:');
  const doc = new PDFDocumentBuilder()
    .title('Test Document')
    .section('Main Section')
      .paragraph('Main content')
      .subSection('Sub Section')
        .paragraph('Sub content')
        .done()
      .done()
    .build();

  console.log(`✅ Hierarchical structure works: ${doc.sections.length === 1}`);

  // Test 3: Email validation
  console.log('\nTest 3 - Email validation:');
  try {
    new EmailTemplateBuilder()
      .from('invalid-email')
      .subject('Test')
      .content()
        .paragraph('test')
        .done()
      .build();
    console.log('❌ Should have thrown error for invalid email');
  } catch (error) {
    console.log('✅ Correctly validates email format');
  }

  // Test 4: Immutability
  console.log('\nTest 4 - Document immutability:');
  const immutableDoc = new PDFDocumentBuilder()
    .title('Test')
    .section('Section')
      .paragraph('Content')
      .done()
    .build();

  try {
    (immutableDoc.metadata as any).title = 'Changed';
    console.log('❌ Document should be immutable');
  } catch (error) {
    console.log('✅ Document is properly immutable');
  }

  // Test 5: Content builder chaining
  console.log('\nTest 5 - Content builder chaining:');
  const emailWithContent = new EmailTemplateBuilder()
    .subject('Test')
    .from('test@example.com')
    .content()
      .greeting('Hello')
      .paragraph('Content')
      .button('Click Me', 'https://example.com')
      .done()
    .build();

  console.log(`✅ Content chaining works: ${emailWithContent.content.length === 3}`);

  console.log();
}

// Run demonstrations
(async () => {
  await demonstrateDocumentBuilder();
  await testDocumentBuilder();
  exit(0);
})();

export {
  PDFDocumentBuilder,
  DocumentHeaderBuilder,
  DocumentSectionBuilder,
  EmailTemplateBuilder,
  EmailContentBuilder,
  DocumentRenderer,
  PDFDocument,
  EmailTemplate
}; 